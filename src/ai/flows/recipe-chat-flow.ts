
'use server';
/**
 * @fileOverview Un agente de IA para chatear sobre recetas y cocina, y para iniciar la recopilaci√≥n de datos para rutinas de entrenamiento.
 *
 * - chatAboutRecipes - Una funci√≥n que maneja las conversaciones sobre recetas y la solicitud inicial de datos para rutinas.
 * - RecipeChatInput - El tipo de entrada para la funci√≥n chatAboutRecipes.
 * - RecipeChatOutput - El tipo de retorno para la funci√≥n chatAboutRecipes.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Esquema para los datos que esperamos del PersonalizedWorkoutInputSchema, para referencia en el prompt.
// Campos requeridos para generar una rutina b√°sica: fitnessLevel, goals, timeAvailablePerSession, daysPerWeek.
const RequiredWorkoutDataContextSchema = z.object({
  fitnessLevel: z.enum(['principiante', 'intermedio', 'avanzado']).describe("Nivel de condici√≥n f√≠sica (ej. 'principiante', 'intermedio', 'avanzado')."),
  goals: z.array(z.string()).min(1).describe("Metas principales (ej. ['perder peso', 'ganar m√∫sculo'])."),
  timeAvailablePerSession: z.string().describe("Tiempo disponible por sesi√≥n (ej. '30 minutos', '1 hora')."),
  daysPerWeek: z.coerce.number().min(1).max(7).describe("N√∫mero de d√≠as a la semana para entrenar."),
  // Campos opcionales que tambi√©n pueden estar en el contexto del usuario:
  limitations: z.array(z.string()).optional().describe("Limitaciones f√≠sicas o lesiones."),
  preferredStyle: z.enum(['hit', 'fuerza_resistencia', 'mixto', 'hipertrofia', 'funcional']).optional().describe("Estilo de entrenamiento preferido (HIT, fuerza, etc.)."),
  availableEquipment: z.array(z.string()).optional().describe("Equipamiento disponible."),
  averageSleepHours: z.number().optional().describe("Horas de sue√±o promedio."),
  restingHeartRate: z.number().optional().describe("Frecuencia card√≠aca en reposo."),
  recentActivitySummary: z.string().optional().describe("Resumen de actividad reciente."),
  stressLevel: z.enum(['bajo', 'medio', 'alto']).optional().describe("Nivel de estr√©s percibido.")
});
export type RequiredWorkoutData = z.infer<typeof RequiredWorkoutDataContextSchema>;

const RecipeChatInputSchema = z.object({
  userQuery: z.string().describe('La pregunta o mensaje del usuario. Puede incluir un prefijo "Contexto del usuario: ..." con sus preferencias.'),
  chatHistory: z.array(z.object({
    role: z.enum(['user', 'assistant']),
    content: z.string(),
  })).optional().describe('Historial de la conversaci√≥n previa para mantener el contexto.'),
});
export type RecipeChatInput = z.infer<typeof RecipeChatInputSchema>;

const RecipeChatOutputSchema = z.object({
  aiResponse: z.string().describe('La respuesta del asistente de IA.'),
});
export type RecipeChatOutput = z.infer<typeof RecipeChatOutputSchema>;

export async function chatAboutRecipes(input: RecipeChatInput): Promise<RecipeChatOutput> {
  return recipeChatFlow(input);
}

const recipeChatPrompt = ai.definePrompt({
  name: 'recipeChatPrompt',
  input: {schema: RecipeChatInputSchema},
  output: {schema: RecipeChatOutputSchema},
  prompt: `Eres "NutriChef AI", un coach de fitness y nutrici√≥n entusiasta y emp√°tico para la aplicaci√≥n Health369. Tu tono es motivador y usas emojis ocasionalmente (üí™, ü•ó, üöÄ).

REGLA DE ORO: Cada respuesta tuya debe terminar con una pregunta abierta para mantener la conversaci√≥n fluida.

TAREAS:

1.  **CHAT SOBRE RECETAS Y COCINA**: Proporciona recetas, listas de ingredientes y consejos de cocina. Personaliza tus respuestas seg√∫n el "Contexto del usuario" (ej. si su objetivo es "ganar masa muscular", sugiere recetas altas en prote√≠nas).
    Ejemplo: Usuario: "Necesito una receta para cenar." Tu respuesta: "¬°Claro que s√≠! Para esa cena post-entreno enfocada en ganar m√∫sculo, ¬øqu√© tal un salm√≥n al horno con esp√°rragos? Es delicioso y lleno de prote√≠na. üêü ¬øTe gustar√≠a la receta completa?"

2.  **INICIAR GENERACI√ìN DE RUTINAS**:
    *   Si el usuario pide una rutina de entrenamiento (ej. "cr√©ame una rutina", "necesito un plan de entrenamiento"), REVISA el "Contexto del usuario" para ver si tienes los datos m√≠nimos (fitnessLevel, goals, timeAvailablePerSession, daysPerWeek).
    *   **SI TIENES LOS DATOS M√çNIMOS**, tu √öNICA RESPUESTA debe ser la frase EXACTA:
        "¬°Excelente! Con la informaci√≥n que me has proporcionado, ya tenemos una buena base para dise√±ar tu rutina. ¬øQuieres que procedamos a generar una propuesta de entrenamiento personalizada para ti?"
    *   **SI FALTAN DATOS M√çNIMOS**, tu √öNICA RESPUESTA debe ser una pregunta amigable para obtenerlos. S√© espec√≠fico.
        Ejemplo si falta tiempo y d√≠as: "¬°Absolutamente! Para empezar a dise√±ar tu rutina, ¬øcu√°ntos d√≠as a la semana te gustar√≠a entrenar y cu√°nto tiempo tienes para cada sesi√≥n? üí™"

SUGERENCIAS PROACTIVAS (si el usuario no sabe qu√© preguntar):
- "¬øQu√© tal si exploramos algunas recetas para ayudarte con tu meta? ü•ó"
- "Si me das algunos detalles sobre tus objetivos y tu nivel, puedo ayudarte a preparar la informaci√≥n para generar una rutina. ¬øQu√© dices? üöÄ"

HISTORIAL DE CONVERSACI√ìN (si existe):
{{#if chatHistory}}
{{#each chatHistory}}
{{role}}: {{{content}}}
{{/each}}
{{/if}}

CONSULTA DEL USUARIO (puede incluir contexto al inicio):
{{{userQuery}}}

RESPUESTA DE NUTRICHEF AI:
(Proporciona aqu√≠ tu respuesta. Sigue las reglas de arriba. No repitas la pregunta del usuario. Termina siempre con una pregunta abierta.)
`,
});

const recipeChatFlow = ai.defineFlow(
  {
    name: 'recipeChatFlow',
    inputSchema: RecipeChatInputSchema,
    outputSchema: RecipeChatOutputSchema,
  },
  async (input) => {
    console.log("Input a recipeChatPrompt:", JSON.stringify(input, null, 2));

    const {output} = await recipeChatPrompt(input);

    if (!output) {
      console.error('El modelo de IA no devolvi√≥ una salida para recipeChatFlow. Input:', input);
      throw new Error('NutriChef AI no pudo generar una respuesta en este momento.');
    }
    
    console.log("Output de recipeChatPrompt:", JSON.stringify(output, null, 2));
    return output;
  }
);
