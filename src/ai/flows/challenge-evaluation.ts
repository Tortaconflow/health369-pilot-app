// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent to evaluate the 'best physical change' in a challenge.
 *
 * - evaluateChallenge - A function that handles the challenge evaluation process.
 * - EvaluateChallengeInput - The input type for the evaluateChallenge function.
 * - EvaluateChallengeOutput - The return type for the evaluateChallenge function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const EvaluateChallengeInputSchema = z.object({
  numericalData: z.array(
    z.object({
      participantId: z.string().describe('The ID of the participant.'),
      weight: z.number().describe('The weight of the participant.'),
      waist: z.number().describe('The waist measurement of the participant.'),
      muscleMassPercentage: z.number().describe('The muscle mass percentage of the participant.'),
    })
  ).describe('An array of numerical data for each participant.'),
  beforePhotos: z.array(
    z.object({
      participantId: z.string().describe('The ID of the participant.'),
      photoDataUri: z
        .string()
        .describe(
          "A 'before' photo of the participant, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
        ),
    })
  ).describe('An array of before photos for each participant.'),
  afterPhotos: z.array(
    z.object({
      participantId: z.string().describe('The ID of the participant.'),
      photoDataUri: z
        .string()
        .describe(
          "An 'after' photo of the participant, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
        ),
    })
  ).describe('An array of after photos for each participant.'),
});
export type EvaluateChallengeInput = z.infer<typeof EvaluateChallengeInputSchema>;

const EvaluateChallengeOutputSchema = z.object({
  winnerId: z.string().describe('The ID of the participant with the best physical change.'),
  evaluationSummary: z.string().describe('A summary of the evaluation process and why the winner was chosen.'),
});
export type EvaluateChallengeOutput = z.infer<typeof EvaluateChallengeOutputSchema>;

export async function evaluateChallenge(input: EvaluateChallengeInput): Promise<EvaluateChallengeOutput> {
  return evaluateChallengeFlow(input);
}

const prompt = ai.definePrompt({
  name: 'evaluateChallengePrompt',
  input: {schema: EvaluateChallengeInputSchema},
  output: {schema: EvaluateChallengeOutputSchema},
  prompt: `You are an AI expert in evaluating physical transformations in fitness challenges.

  You will receive numerical data (weight, waist measurement, muscle mass percentage) and "before" and "after" photos for each participant.

  Your task is to evaluate the "best physical change" and determine a winner based on the provided data.

  Consider both the numerical data and the visual evidence in the photos.

  Provide a detailed evaluation summary explaining why the winner was chosen.

  Numerical Data:
  {{#each numericalData}}
  Participant ID: {{{participantId}}}
  Weight: {{{weight}}}
  Waist: {{{waist}}}
  Muscle Mass Percentage: {{{muscleMassPercentage}}}
  {{/each}}

  Before Photos:
  {{#each beforePhotos}}
  Participant ID: {{{participantId}}}
  Photo: {{media url=photoDataUri}}
  {{/each}}

  After Photos:
  {{#each afterPhotos}}
  Participant ID: {{{participantId}}}
  Photo: {{media url=photoDataUri}}
  {{/each}}
  `,
});

const evaluateChallengeFlow = ai.defineFlow(
  {
    name: 'evaluateChallengeFlow',
    inputSchema: EvaluateChallengeInputSchema,
    outputSchema: EvaluateChallengeOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
