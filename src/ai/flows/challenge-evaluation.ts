// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent to evaluate the 'best physical change' in a challenge.
 *
 * - evaluateChallenge - A function that handles the challenge evaluation process.
 * - EvaluateChallengeInput - The input type for the evaluateChallenge function.
 * - EvaluateChallengeOutput - The return type for the evaluateChallenge function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const EvaluateChallengeInputSchema = z.object({
  numericalData: z.array(
    z.object({
      participantId: z.string().describe('The ID of the participant.'),
      weight: z.number().describe('The weight of the participant.'),
      waist: z.number().describe('The waist measurement of the participant.'),
      muscleMassPercentage: z.number().describe('The muscle mass percentage of the participant.'),
    })
  ).describe('An array of numerical data for each participant.'),
  beforePhotos: z.array(
    z.object({
      participantId: z.string().describe('The ID of the participant.'),
      photoDataUri: z
        .string()
        .describe(
          "A 'before' photo of the participant, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
        ),
    })
  ).describe('An array of before photos for each participant.'),
  afterPhotos: z.array(
    z.object({
      participantId: z.string().describe('The ID of the participant.'),
      photoDataUri: z
        .string()
        .describe(
          "An 'after' photo of the participant, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
        ),
    })
  ).describe('An array of after photos for each participant.'),
});
export type EvaluateChallengeInput = z.infer<typeof EvaluateChallengeInputSchema>;

const ParticipantEvaluationSchema = z.object({
  participantId: z.string().describe("The ID of the participant being evaluated."),
  score: z.number().min(1).max(10).describe("A numerical score from 1 (little change) to 10 (amazing transformation) evaluating the participant's progress."),
  reasoning: z.string().describe("A detailed, objective explanation for the score, referencing both numerical data and visual changes in photos."),
});

const EvaluateChallengeOutputSchema = z.object({
  evaluations: z.array(ParticipantEvaluationSchema).describe("An array containing the evaluation for each participant."),
  finalWinnerId: z.string().describe('The ID of the participant with the highest overall score.'),
  summary: z.string().describe('A comprehensive summary of the challenge results, highlighting the winner and notable achievements of other participants.'),
});
export type EvaluateChallengeOutput = z.infer<typeof EvaluateChallengeOutputSchema>;

export async function evaluateChallenge(input: EvaluateChallengeInput): Promise<EvaluateChallengeOutput> {
  return evaluateChallengeFlow(input);
}

const evaluateChallengeFlow = ai.defineFlow(
  {
    name: 'evaluateChallengeFlow',
    inputSchema: EvaluateChallengeInputSchema,
    outputSchema: EvaluateChallengeOutputSchema,
  },
  async (input) => {
    const instructionPrompt = `You are an expert AI fitness judge. Your task is to evaluate the results of a fitness challenge based on data provided for multiple participants. You must determine a winner by assigning a score to each participant and providing a clear rationale.

    **Instructions:**

    1.  **Analyze Each Participant:** For each participant, carefully review their numerical data (weight, waist, muscle mass) and visually compare their "before" and "after" photos.
    2.  **Score Each Participant:** Assign a score from 1 to 10, where 1 represents minimal change and 10 represents an outstanding transformation. The score should be based on a holistic view of all provided data. For example, significant fat loss (reduced weight and waist) combined with muscle gain (increased muscle mass percentage) is highly valuable. Visual confirmation in the photos is crucial.
    3.  **Provide Reasoning:** For each participant, write a concise but detailed reasoning for the score. Mention specific data points (e.g., "lost 5kg," "reduced waist by 3cm") and visual observations from the photos (e.g., "increased muscle definition in the arms," "visible reduction in abdominal fat").
    4.  **Determine the Winner:** Based on your calculated scores, identify the participant with the highest score as the winner.
    5.  **Write a Summary:** Provide an overall summary of the challenge results. Congratulate the winner and briefly mention the commendable efforts of other participants.
    6.  **Respond in JSON:** Your final output must be a single, valid JSON object that adheres to the specified output schema. Do not include any text or formatting outside of the JSON object.`;

    const promptParts: any[] = [{ text: instructionPrompt }];

    promptParts.push({ text: "\n\n**Participant Data:**\n" });

    input.numericalData.forEach(pData => {
        const beforePhoto = input.beforePhotos.find(p => p.participantId === pData.participantId);
        const afterPhoto = input.afterPhotos.find(p => p.participantId === pData.participantId);

        promptParts.push({ text: `\n- **Participant ID:** ${pData.participantId}`});
        promptParts.push({ text: `  - **Weight:** ${pData.weight} kg` });
        promptParts.push({ text: `  - **Waist:** ${pData.waist} cm` });
        promptParts.push({ text: `  - **Muscle Mass %:** ${pData.muscleMassPercentage}%` });

        if (beforePhoto) {
            promptParts.push({ text: "  - **Before Photo:**" });
            promptParts.push({ media: { url: beforePhoto.photoDataUri } });
        }
        if (afterPhoto) {
            promptParts.push({ text: "  - **After Photo:**" });
            promptParts.push({ media: { url: afterPhoto.photoDataUri } });
        }
    });

    const { output } = await ai.generate({
      model: 'googleai/gemini-1.5-pro-latest', // Use a powerful multimodal model
      prompt: promptParts,
      output: {
        schema: EvaluateChallengeOutputSchema,
      },
    });

    if (!output) {
      throw new Error("The AI model did not return any output.");
    }

    // Optional: Add logic here to verify the winnerId matches the highest score
    // For now, we trust the model to be consistent.

    return output;
  }
);
